{"version":3,"sources":["SortingVisualizer/Components/Header/Header.jsx","SortingVisualizer/Components/ButtonsBar/ButtonsBar.jsx","SortingVisualizer/Components/ArrayBar/ArrayBar.jsx","SortingVisualizer/Components/RangeSliders/ArrayBarRangeSlider/ArrayBarRangeSlider.jsx","SortingVisualizer/Components/RangeSliders/AnimationSpeedRangeSlider/AnimationSpeedRangeSlider.jsx","SortingVisualizer/Components/RangeSliders/RangeSlider.jsx","SortingVisualizer/sounds/CompletedEffect.mp3","SortingVisualizer/HelperFunctions.js","SortingVisualizer/SortingAlgorithms/BubbleSort/getBubbleSortAnimations.js","SortingVisualizer/SortingAlgorithms/BubbleSort/BubbleSort.js","SortingVisualizer/SortingAlgorithms/SelectionSort/getSelectionSortAnimations.js","SortingVisualizer/SortingAlgorithms/SelectionSort/SelectionSort.js","SortingVisualizer/SortingAlgorithms/InsertionSort/getInsertionSortAnimations.js","SortingVisualizer/SortingAlgorithms/InsertionSort/InsertionSort.js","SortingVisualizer/sounds/ResetEffect.mp3","SortingVisualizer/SortingVisualizer.jsx","index.js"],"names":["Header","className","id","Component","ButtonsBar","onClick","props","generateNewArray","bubbleSort","selectionSort","insertionSort","BarContainer","this","array","map","value","i","style","height","transform","ArrayBarSlider","withStyles","root","color","inlineSize","padding","thumb","width","backgroundColor","border","marginTop","marginLeft","active","track","borderRadius","rail","Slider","ArrayBarRangeSlider","state","numberOfArrayBars","min","max","step","defaultValue","valueLabelDisplay","marks","onChangeCommitted","onChangeArrayBarRangeSlider","AnimationSpeedSlider","AnimationSpeedRangeSlider","animationSpeed","onChangeAnimationSpeedRangeSlider","RangeSlider","right_color_bar","document","getElementsByClassName","left_color_bar","front_color_bar","back_color_bar","bottom_color_bar","getBarStyle","index","changeBackgroundColor","styleOfElement","j","length","changeBoxShadow","shadow","boxShadow","swapBars","index1","index2","styleOfElement1","styleOfElement2","tempHeight","h1","parseInt","h2","resetBarStyleDefault","setTimeout","enableButtons","getElementById","disabled","opacity","visibility","disableButtons","playAudio","myAudio","audio","Audio","preload","play","then","catch","playCompletedSoundEffect","CompletedEffect","getBubbleSortAnimations","animations","push","BubbleSort","comparingElement1","comparingElement2","doSwap","isFinalElement","finalElement","promise1","Promise","resolve","reject","promise2","all","getSelectionSortAnimations","min_idx","SelectionSort","minIndexElement","getInsertionSortAnimations","key","InsertionSort","sortedTill","SortingVisualizer","event","setState","bind","Math","floor","random","ResetEffect","ReactDOM","render"],"mappings":"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","file":"static/js/main.781c944a.chunk.js","sourcesContent":["// ## This component includes an animated title / header with text \"SORTING VISUALIZER\". ## //\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./Header.css\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <p id=\"animateText\">Sorting Visualizer</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// ## This component includes the buttons for sorting algorithms and also generating new array. ## //\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./ButtonsBar.css\";\r\n\r\nexport default class ButtonsBar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"buttons-bar\">\r\n        <button onClick={() => this.props.generateNewArray()} id=\"reset\">\r\n          Generate New Array\r\n        </button>\r\n        <button\r\n          id=\"bubbleSortButton\"\r\n          onClick={() => this.props.bubbleSort()}\r\n          className=\"buttonStyle1\"\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          id=\"selectionSortButton\"\r\n          onClick={() => this.props.selectionSort()}\r\n          className=\"buttonStyle2\"\r\n        >\r\n          Selection Sort\r\n        </button>\r\n        <button\r\n          id=\"insertionSortButton\"\r\n          onClick={() => this.props.insertionSort()}\r\n          className=\"buttonStyle1\"\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// ## This component includes all the 3D bars/containers and array values. ## //\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./ArrayBar.css\";\r\n\r\nexport default class BarContainer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"bar-container\">\r\n        {/* Create n bars, where n - size of the array */}\r\n        {this.props.array.map((value, i) => (\r\n          <div className=\"bar\" key={i}>\r\n            <div className=\"side top\"></div>\r\n            <div className=\"side bottom\"></div>\r\n            <div className=\"side right\">\r\n              <div\r\n                className=\"color-bar right-color-bar\"\r\n                style={{\r\n                  height: `${value}vh`,\r\n                  transform: `translateY(${70 - value}vh)`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <div className=\"side left\">\r\n              <div\r\n                className=\"color-bar left-color-bar\"\r\n                style={{\r\n                  height: `${value}vh`,\r\n                  transform: `translateY(${70 - value}vh)`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <div className=\"side front\">\r\n              <div\r\n                className=\"color-bar front-color-bar\"\r\n                style={{\r\n                  height: `${value}vh`,\r\n                  transform: `translateY(${70 - value}vh)`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <div className=\"side back\">\r\n              <div\r\n                className=\"color-bar back-color-bar\"\r\n                style={{\r\n                  height: `${value}vh`,\r\n                  transform: `translateY(${70 - value}vh)`,\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// ## This component includes a range slider for changing Array Size. ## //\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Slider, withStyles } from \"@material-ui/core\";\r\nimport \"./ArrayBarRangeSlider.css\";\r\n\r\nconst ArrayBarSlider = withStyles({\r\n  root: {\r\n    color: \"rgba(100, 180, 255, 1)\",\r\n    inlineSize: \"60%\",\r\n    padding: 10,\r\n  },\r\n  thumb: {\r\n    height: 12,\r\n    width: 12,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid cyan\",\r\n    marginTop: -4,\r\n    marginLeft: 0,\r\n  },\r\n  active: {},\r\n  track: {\r\n    height: 4,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 4,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider);\r\n\r\nexport default class ArrayBarRangeSlider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      numberOfArrayBars: this.props.numberOfArrayBars,\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"range-slider-container\">\r\n        <p id=\"text-array-size\">Array Size</p>\r\n        <ArrayBarSlider\r\n          id=\"arrayBarSlider\"\r\n          min={2}\r\n          max={14}\r\n          step={1}\r\n          defaultValue={this.state.numberOfArrayBars}\r\n          valueLabelDisplay=\"auto\"\r\n          marks\r\n          onChangeCommitted={this.props.onChangeArrayBarRangeSlider}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// ## This component includes a range slider for changing Animation Speed. ## //\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Slider, withStyles } from \"@material-ui/core\";\r\nimport \"./AnimationSpeedRangeSlider.css\";\r\n\r\nconst AnimationSpeedSlider = withStyles({\r\n  root: {\r\n    color: \"rgba(100, 180, 255, 1)\",\r\n    inlineSize: \"60%\",\r\n    padding: 10,\r\n  },\r\n  thumb: {\r\n    height: 12,\r\n    width: 12,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid cyan\",\r\n    marginTop: -4,\r\n    marginLeft: 0,\r\n  },\r\n  active: {},\r\n  track: {\r\n    height: 4,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 4,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider);\r\n\r\nexport default class AnimationSpeedRangeSlider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      animationSpeed: this.props.animationSpeed,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"range-slider-container\">\r\n        <p id=\"text-animation-speed\">Animation Speed (ms)</p>\r\n        <AnimationSpeedSlider\r\n          id=\"animationSpeedSlider\"\r\n          min={10}\r\n          max={200}\r\n          defaultValue={this.state.animationSpeed}\r\n          valueLabelDisplay=\"auto\"\r\n          onChangeCommitted={this.props.onChangeAnimationSpeedRangeSlider}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// ## This component includes the containers of range sliders. ## //\r\n\r\nimport React, { Component } from \"react\";\r\nimport ArrayBarRangeSlider from \"./ArrayBarRangeSlider/ArrayBarRangeSlider.jsx\";\r\nimport AnimationSpeedRangeSlider from \"./AnimationSpeedRangeSlider/AnimationSpeedRangeSlider.jsx\";\r\nimport \"./RangeSlider.css\";\r\n\r\nexport default class RangeSlider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      numberOfArrayBars: this.props.numberOfArrayBars,\r\n      animationSpeed: this.props.animationSpeed,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"range-slider\">\r\n        <div className=\"column\">\r\n          <ArrayBarRangeSlider\r\n            numberOfArrayBars={this.state.numberOfArrayBars}\r\n            onChangeArrayBarRangeSlider={this.props.onChangeArrayBarRangeSlider}\r\n          />\r\n        </div>\r\n        <div className=\"column\">\r\n          <AnimationSpeedRangeSlider\r\n            animationSpeed={this.state.animationSpeed}\r\n            onChangeAnimationSpeedRangeSlider={\r\n              this.props.onChangeAnimationSpeedRangeSlider\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/CompletedEffect.b461f47f.mp3\";","import CompletedEffect from \"./sounds/CompletedEffect.mp3\";\r\n\r\nconst right_color_bar = document.getElementsByClassName(\"right-color-bar\");\r\nconst left_color_bar = document.getElementsByClassName(\"left-color-bar\");\r\nconst front_color_bar = document.getElementsByClassName(\"front-color-bar\");\r\nconst back_color_bar = document.getElementsByClassName(\"back-color-bar\");\r\nconst bottom_color_bar = document.getElementsByClassName(\"bottom\");\r\n\r\n// ## Helps to easily fetch all the sides of the element ## //\r\nexport function getBarStyle(index) {\r\n  const barStyle = [\r\n    right_color_bar[index].style,\r\n    left_color_bar[index].style,\r\n    back_color_bar[index].style,\r\n    front_color_bar[index].style,\r\n    bottom_color_bar[index].style,\r\n  ];\r\n  return barStyle;\r\n}\r\n\r\n// ## Changes color of all the sides of color-bar ## //\r\nexport function changeBackgroundColor(index, color) {\r\n  const styleOfElement = getBarStyle(index);\r\n  for (let j = 0; j < styleOfElement.length; j++)\r\n    styleOfElement[j].backgroundColor = color;\r\n}\r\n\r\n// ## Changes box-shadow of all the sides of color-bar ## //\r\nexport function changeBoxShadow(index, shadow) {\r\n  const styleOfElement = getBarStyle(index);\r\n  for (let j = 0; j < styleOfElement.length; j++)\r\n    styleOfElement[j].boxShadow = shadow;\r\n}\r\n\r\n// ## Swaps 2 array-bars ( Swapping heights ) ## //\r\nexport function swapBars(index1, index2) {\r\n  const styleOfElement1 = getBarStyle(index1),\r\n    styleOfElement2 = getBarStyle(index2);\r\n  for (let j = 0; j < 4; j++) {\r\n    const tempHeight = styleOfElement1[j].height;\r\n    styleOfElement1[j].height = styleOfElement2[j].height;\r\n    styleOfElement2[j].height = tempHeight;\r\n\r\n    const h1 = parseInt(styleOfElement1[j].height, 10),\r\n      h2 = parseInt(styleOfElement2[j].height, 10);\r\n\r\n    styleOfElement1[j].transform = `translateY(${70 - h1}vh)`;\r\n    styleOfElement2[j].transform = `translateY(${70 - h2}vh)`;\r\n  }\r\n}\r\n\r\n// ## Reset the style of all the color-bars ## //\r\nexport function resetBarStyleDefault(array, animationSpeed) {\r\n  setTimeout(() => {\r\n    for (let j = 0; j < array.length; j++) {\r\n      changeBackgroundColor(j, \"rgba(225, 0, 120, 0.5)\");\r\n      changeBoxShadow(j, \"5px 5px 50px 5px rgba(225, 0, 120, 0.2)\");\r\n    }\r\n  }, animationSpeed);\r\n}\r\n\r\n// ## Returns any random value from the interval [min, max] ## //\r\nexport function randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// ## Enables all the buttons ## //\r\nexport function enableButtons() {\r\n  document.getElementById(\"reset\").disabled = false;\r\n  document.getElementById(\"bubbleSortButton\").disabled = false;\r\n  document.getElementById(\"selectionSortButton\").disabled = false;\r\n  document.getElementById(\"insertionSortButton\").disabled = false;\r\n  document.getElementById(\"range-slider\").style.opacity = 1;\r\n  document.getElementById(\"range-slider\").style.visibility = \"visible\";\r\n}\r\n\r\n// ## Disables all the buttons ## //\r\nexport function disableButtons() {\r\n  document.getElementById(\"reset\").disabled = true;\r\n  document.getElementById(\"bubbleSortButton\").disabled = true;\r\n  document.getElementById(\"selectionSortButton\").disabled = true;\r\n  document.getElementById(\"insertionSortButton\").disabled = true;\r\n  document.getElementById(\"range-slider\").style.opacity = 0;\r\n  document.getElementById(\"range-slider\").style.visibility = \"hidden\";\r\n}\r\n\r\n// ## Plays audio ## //\r\nexport function playAudio(myAudio) {\r\n  const audio = new Audio(myAudio);\r\n  audio.preload = \"auto\";\r\n  const playing = audio.play();\r\n  playing.then(() => {}).catch(() => {});\r\n}\r\n\r\nexport function playCompletedSoundEffect() {\r\n  playAudio(CompletedEffect);\r\n}\r\n","const getBubbleSortAnimations = (array) => {\r\n  const animations = []; // { comparingElement1, comparingElement2, doSwap, isFinalElement, finalElement }\r\n\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      // Push animation for comparing 2 elements\r\n      animations.push(j, j + 1, false, false, -1);\r\n      if (array[j] > array[j + 1]) {\r\n        // Swapping values\r\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n        // Push animation for swapping 2 values\r\n        animations.push(j, j + 1, true, false, -1);\r\n      }\r\n    }\r\n    // Here, the (array.length - 1 - i)th indexed element will be sorted. So we need to change its color.\r\n    // Push animation for (array.length - 1 - i)th indexed element which got its sorted position.\r\n    animations.push(\r\n      array.length - 1 - i,\r\n      array.length - 1 - i,\r\n      false,\r\n      true,\r\n      array.length - 1 - i\r\n    );\r\n  }\r\n  // Push animation to know that it's the end of the animation.\r\n  animations.push(0, 0, false, true, 0);\r\n\r\n  return animations;\r\n};\r\n\r\nexport default getBubbleSortAnimations;\r\n","import getBubbleSortAnimations from \"./getBubbleSortAnimations\";\r\nimport {\r\n  changeBackgroundColor,\r\n  changeBoxShadow,\r\n  swapBars,\r\n  resetBarStyleDefault,\r\n  disableButtons,\r\n  enableButtons,\r\n  playCompletedSoundEffect,\r\n} from \"../../HelperFunctions.js\";\r\n\r\nconst BubbleSort = (array, animationSpeed) => {\r\n  // Disabling the buttons so that the animation cannot be interrupted.\r\n  disableButtons();\r\n\r\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\r\n  const animations = getBubbleSortAnimations(array);\r\n\r\n  for (let i = 0; i < animations.length; i += 5) {\r\n    const comparingElement1 = animations[i];\r\n    const comparingElement2 = animations[i + 1];\r\n    const doSwap = animations[i + 2];\r\n    const isFinalElement = animations[i + 3];\r\n    const finalElement = animations[i + 4];\r\n\r\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\r\n    const promise1 = new Promise(function (resolve, reject) {\r\n      setTimeout(() => {\r\n        // Changing the color-bar of comparing elements.\r\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\r\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\r\n\r\n        if (doSwap === true) {\r\n          // Changing the color-bar of elements which has to be swapped.\r\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\r\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\r\n          // Actually swapping the elements (heights).\r\n          swapBars(comparingElement1, comparingElement2);\r\n        }\r\n      }, i * animationSpeed);\r\n\r\n      // Resolving the promise after the setTimeout ends.\r\n      resolve();\r\n    });\r\n\r\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\r\n    const promise2 = new Promise(function (resolve, reject) {\r\n      setTimeout(() => {\r\n        if (isFinalElement === true) {\r\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\r\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\r\n          changeBoxShadow(\r\n            finalElement,\r\n            \"5px 5px 50px 5px  rgba(0, 164, 86, 0.2)\"\r\n          );\r\n        } else {\r\n          // Changing the color-bar of element which has not taken its final sorted position yet.\r\n          changeBackgroundColor(comparingElement1, \"rgba(225, 0, 120, 0.6)\");\r\n          changeBoxShadow(comparingElement1, \"rgba(225, 0, 120, 0.2)\");\r\n        }\r\n        // From \"getBubbleSortAnimations\" function, we know that the array is sorted when finalElement is 0.\r\n        // Resolving the promise when the finalElement index is 0.\r\n        if (finalElement === 0) resolve();\r\n      }, (i + 5) * animationSpeed);\r\n    });\r\n\r\n    Promise.all([promise1, promise2])\r\n      .then(playCompletedSoundEffect)\r\n      // Enabling the buttons when both the promises have been resolved.\r\n      .then(enableButtons);\r\n  }\r\n\r\n  // Resetting the color-bar style to default after the animations end.\r\n  resetBarStyleDefault(array, (animations.length + 5) * animationSpeed);\r\n};\r\n\r\nexport default BubbleSort;\r\n","const getSelectionSortAnimations = (array) => {\r\n  const animations = []; // { currElement, comparingElement, minIndex, doSwap, isFinalElement, finalElement }\r\n\r\n  let min_idx;\r\n  for (let i = 0; i < array.length; i++) {\r\n    min_idx = i;\r\n    // Push animation for the current element which has to be sorted.\r\n    animations.push(i, i, min_idx, false, false, -1);\r\n\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      // Push animation for (i)th, (j)th and (min_idx)th index elements.\r\n      animations.push(i, j, min_idx, false, false, -1);\r\n      if (array[j] < array[min_idx]) {\r\n        min_idx = j;\r\n        // Push animation for changing min_idx element.\r\n        animations.push(i, j, min_idx, false, false, -1);\r\n      }\r\n    }\r\n    if (min_idx !== i) {\r\n      // Swapping 2 values.\r\n      [array[i], array[min_idx]] = [array[min_idx], array[i]];\r\n      // Push animation for swapping (i)th index and (min_idx)th index elements.\r\n      animations.push(i, i, min_idx, true, false, -1);\r\n    }\r\n    // Here, the (i)th indexed element will be sorted. So we need to change its color.\r\n    // Push animation for (i)th indexed element which got its sorted position.\r\n    animations.push(i, i, i, false, true, i);\r\n  }\r\n\r\n  return animations;\r\n};\r\n\r\nexport default getSelectionSortAnimations;\r\n","import getSelectionSortAnimations from \"./getSelectionSortAnimations\";\r\nimport {\r\n  changeBackgroundColor,\r\n  changeBoxShadow,\r\n  swapBars,\r\n  resetBarStyleDefault,\r\n  disableButtons,\r\n  enableButtons,\r\n  playCompletedSoundEffect,\r\n} from \"../../HelperFunctions.js\";\r\n\r\nconst SelectionSort = (array, animationSpeed) => {\r\n  // Disabling the buttons so that the animation cannot be interrupted.\r\n  disableButtons();\r\n\r\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\r\n  const animations = getSelectionSortAnimations(array);\r\n\r\n  for (let i = 0; i < animations.length; i += 6) {\r\n    const comparingElement1 = animations[i],\r\n      comparingElement2 = animations[i + 1],\r\n      minIndexElement = animations[i + 2],\r\n      doSwap = animations[i + 3],\r\n      isFinalElement = animations[i + 4],\r\n      finalElement = animations[i + 5];\r\n\r\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\r\n    const promise1 = new Promise(function (resolve, reject) {\r\n      setTimeout(() => {\r\n        // Changing the color-bar of current elements.\r\n        changeBackgroundColor(minIndexElement, \"rgba(0,0,255, 0.9)\");\r\n        changeBackgroundColor(comparingElement1, \"rgba(0,0,0, 0.9)\");\r\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\r\n\r\n        if (doSwap === true) {\r\n          // Changing the color-bar of elements which has to be swapped.\r\n          changeBackgroundColor(minIndexElement, \"rgba(144,238,144, 0.9)\");\r\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\r\n          // Actually swapping the elements (heights).\r\n          swapBars(comparingElement1, minIndexElement);\r\n        }\r\n      }, i * animationSpeed);\r\n\r\n      // Resolving the promise after the setTimeout ends.\r\n      resolve();\r\n    });\r\n\r\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\r\n    const promise2 = new Promise(function (resolve, reject) {\r\n      setTimeout(() => {\r\n        if (isFinalElement === true) {\r\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\r\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\r\n          changeBoxShadow(\r\n            finalElement,\r\n            \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\"\r\n          );\r\n        } else {\r\n          // Changing the color-bar of elements which has not taken its final sorted position yet.\r\n          changeBackgroundColor(comparingElement2, \"rgba(225, 0, 120, 0.6)\");\r\n          changeBackgroundColor(minIndexElement, \"rgba(225, 0, 120, 0.6)\");\r\n        }\r\n\r\n        // From \"getSelectionSortAnimations\" function, we know that the array is sorted when finalElement is (array.length - 1).\r\n        // Resolving the promise when the finalElement index is (array.length - 1).\r\n        if (finalElement === array.length - 1) resolve();\r\n      }, (i + 6) * animationSpeed);\r\n    });\r\n\r\n    Promise.all([promise1, promise2])\r\n      .then(playCompletedSoundEffect)\r\n      // Enabling the buttons when both the promises have been resolved.\r\n      .then(enableButtons);\r\n  }\r\n\r\n  // Resetting the color-bar style to default after the animations end.\r\n  resetBarStyleDefault(array, (animations.length + 6) * animationSpeed);\r\n};\r\n\r\nexport default SelectionSort;\r\n","const getInsertionSortAnimations = (array) => {\r\n  const animations = []; // { comparingELement1, comparingElement2, doSwap, sortedTill }\r\n\r\n  // Push animation for sorting first element.\r\n  animations.push(0, 0, false, 0);\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    let key = array[i],\r\n      j = i - 1;\r\n\r\n    // Push animation for comparing 2 elements\r\n    animations.push(i, j, false, i - 1);\r\n    while (j >= 0 && array[j] > key) {\r\n      // Swapping 2 values\r\n      [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n      // Push animation for comparing 2 elements\r\n      animations.push(j, j + 1, false, i);\r\n      // Push animation for swapping 2 elements\r\n      animations.push(j, j + 1, true, i);\r\n      j--;\r\n    }\r\n  }\r\n\r\n  // Push animation to know that it's the end of the animations.\r\n  animations.push(array.length - 1, array.length - 1, false, array.length - 1);\r\n  return animations;\r\n};\r\n\r\nexport default getInsertionSortAnimations;\r\n","import getInsertionSortAnimations from \"./getInsertionSortAnimations\";\r\nimport {\r\n  changeBackgroundColor,\r\n  changeBoxShadow,\r\n  swapBars,\r\n  resetBarStyleDefault,\r\n  disableButtons,\r\n  enableButtons,\r\n  playCompletedSoundEffect,\r\n} from \"../../HelperFunctions.js\";\r\n\r\nconst InsertionSort = (array, animationSpeed) => {\r\n  // Disabling the buttons so that the animation cannot be interrupted.\r\n  disableButtons();\r\n\r\n  // Getting the animations which has been generated in the \"getInsertionSortAnimations\" function.\r\n  const animations = getInsertionSortAnimations(array);\r\n\r\n  for (let i = 0; i < animations.length; i += 4) {\r\n    const comparingElement1 = animations[i],\r\n      comparingElement2 = animations[i + 1],\r\n      doSwap = animations[i + 2],\r\n      sortedTill = animations[i + 3];\r\n\r\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\r\n    const promise1 = new Promise(function (resolve, reject) {\r\n      setTimeout(() => {\r\n        // Changing the color-bar of comparing elements.\r\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\r\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\r\n\r\n        if (doSwap === true) {\r\n          // Changing the color-bar of elements which has to be swapped.\r\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\r\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\r\n          // Actually swapping the elements (heights).\r\n          swapBars(comparingElement1, comparingElement2);\r\n        }\r\n      }, i * animationSpeed);\r\n\r\n      // Resolving the promise after the setTimeout ends.\r\n      resolve();\r\n    });\r\n\r\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\r\n    const promise2 = new Promise(function (resolve, reject) {\r\n      setTimeout(() => {\r\n        // Changing the color-bars of the elements till sortedTill index.\r\n        for (let j = 0; j <= sortedTill; j++) {\r\n          changeBackgroundColor(j, \"rgba(0, 164, 86, 0.6)\");\r\n          changeBoxShadow(j, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\r\n        }\r\n\r\n        // From \"getInsertionSortAnimations\" function, we know that the array is sorted when both the comparing elements are (array.length - 1).\r\n        // Resolving the promise when the both the comparing elemnts are (array.length - 1).\r\n        if (\r\n          comparingElement1 === array.length - 1 &&\r\n          comparingElement2 === array.length - 1\r\n        )\r\n          resolve();\r\n      }, (i + 4) * animationSpeed);\r\n    });\r\n\r\n    Promise.all([promise1, promise2])\r\n      .then(playCompletedSoundEffect)\r\n      // Enabling the buttons when both the promises have been resolved.\r\n      .then(enableButtons);\r\n  }\r\n\r\n  // Resetting the color-bar style to default after the animations end.\r\n  resetBarStyleDefault(array, (animations.length + 4) * animationSpeed);\r\n};\r\n\r\nexport default InsertionSort;\r\n","export default __webpack_public_path__ + \"static/media/ResetEffect.af1cdbbb.mp3\";","import React, { Component } from \"react\";\r\n// .. COMPONENTS .. //\r\nimport Header from \"./Components/Header/Header.jsx\";\r\nimport ButtonsBar from \"./Components/ButtonsBar/ButtonsBar.jsx\";\r\nimport ArrayBar from \"./Components/ArrayBar/ArrayBar.jsx\";\r\nimport RangeSlider from \"./Components/RangeSliders/RangeSlider.jsx\";\r\n// .. HELPER FUNCTIONS .. //\r\nimport { randomIntFromInterval, playAudio } from \"./HelperFunctions.js\";\r\n// .. ALGORITHMS .. //\r\nimport BubbleSort from \"./SortingAlgorithms/BubbleSort/BubbleSort.js\";\r\nimport SelectionSort from \"./SortingAlgorithms/SelectionSort/SelectionSort.js\";\r\nimport InsertionSort from \"./SortingAlgorithms/InsertionSort/InsertionSort.js\";\r\n// .. STYLE .. //\r\nimport \"./SortingVisualizer.css\";\r\n// .. SOUNDS .. //\r\nimport ResetEffect from \"./sounds/ResetEffect.mp3\";\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      //  // ##\r\n      //        Initializing in state because:\r\n      //         1. It might be changed later by the user.\r\n      //         2. The change value must be re-rendered.\r\n      // ## //\r\n      array: [],\r\n      animationSpeed: 50,\r\n      numberOfArrayBars: 10,\r\n    };\r\n\r\n    this.generateNewArray = this.generateNewArray.bind(this);\r\n    this.bubbleSort = this.bubbleSort.bind(this);\r\n    this.selectionSort = this.selectionSort.bind(this);\r\n    this.insertionSort = this.insertionSort.bind(this);\r\n    this.onChangeArrayBarRangeSlider = this.onChangeArrayBarRangeSlider.bind(\r\n      this\r\n    );\r\n    this.onChangeAnimationSpeedRangeSlider = this.onChangeAnimationSpeedRangeSlider.bind(\r\n      this\r\n    );\r\n  }\r\n\r\n  // ## This function generates the array before the page is rendere. ## //\r\n  componentDidMount() {\r\n    this.generateNewArray();\r\n  }\r\n\r\n  // ## This function generates new random array of size \"numberOfArrayBars\". ## //\r\n  generateNewArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.numberOfArrayBars; i++) {\r\n      // ## Generates an element between 5 and 70, and pushes it into the array. ## //\r\n      array.push(randomIntFromInterval(5, 70));\r\n    }\r\n    playAudio(ResetEffect);\r\n    this.setState({ array: array });\r\n  }\r\n\r\n  // ******************************************************************************* //\r\n\r\n  // ## Handles if the \"Array Size\" slider is changed. ## //\r\n  onChangeArrayBarRangeSlider = (event, value) => {\r\n    this.setState({ numberOfArrayBars: value });\r\n    this.generateNewArray();\r\n  };\r\n\r\n  // ## Handles if the \"Animation Speed\" slider is changed. ## //\r\n  onChangeAnimationSpeedRangeSlider = (event, value) => {\r\n    this.setState({ animationSpeed: value });\r\n  };\r\n\r\n  // ******************************************************************************* //\r\n\r\n  // ## Calls the BubbleSort component/function. ## //\r\n  bubbleSort = () => {\r\n    BubbleSort(this.state.array, this.state.animationSpeed);\r\n  };\r\n\r\n  // ## Calls the SelectionSort component/function. ## //\r\n  selectionSort = () => {\r\n    SelectionSort(this.state.array, this.state.animationSpeed);\r\n  };\r\n\r\n  // ## Calls the InsertionSort component/function. ## //\r\n  insertionSort = () => {\r\n    InsertionSort(this.state.array, this.state.animationSpeed);\r\n  };\r\n\r\n  // ******************************************************************************* //\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        {/* --------------------- HEADER : 8% Height --------------------- */}\r\n        <Header />\r\n\r\n        {/* --------------------- BUTTONS : 10% Height --------------------- */}\r\n        <ButtonsBar\r\n          generateNewArray={this.generateNewArray}\r\n          bubbleSort={this.bubbleSort}\r\n          selectionSort={this.selectionSort}\r\n          insertionSort={this.insertionSort}\r\n        />\r\n\r\n        {/* --------------------- BARS : 74% Height --------------------- */}\r\n        <ArrayBar array={this.state.array} />\r\n\r\n        {/* --------------------- SLIDERS : 8% Height --------------------- */}\r\n        <RangeSlider\r\n          numberOfArrayBars={this.state.numberOfArrayBars}\r\n          animationSpeed={this.state.animationSpeed}\r\n          onChangeArrayBarRangeSlider={this.onChangeArrayBarRangeSlider}\r\n          onChangeAnimationSpeedRangeSlider={\r\n            this.onChangeAnimationSpeedRangeSlider\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer.jsx\";\n\n// ## Rendering SortingVisualizer Component ( Imported from path mentioned about ) ## //\nReactDOM.render(<SortingVisualizer />, document.getElementById(\"root\"));\n"],"sourceRoot":""}